// <auto-generated />
using System;
using Fruittrack;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fruittrack.Migrations
{
    [DbContext(typeof(FruitTrackDbContext))]
    partial class FruitTrackDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fruittrack.Models.Factory", b =>
                {
                    b.Property<int>("FactoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FactoryId"));

                    b.Property<string>("FactoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FactoryId");

                    b.ToTable("Factories");
                });

            modelBuilder.Entity("Fruittrack.Models.Farm", b =>
                {
                    b.Property<int>("FarmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmId"));

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FarmId");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("Fruittrack.Models.FinancialSettlement", b =>
                {
                    b.Property<int>("SettlementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettlementId"));

                    b.Property<decimal>("ExpectedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ReceivedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SupplyEntryId")
                        .HasColumnType("int");

                    b.HasKey("SettlementId");

                    b.HasIndex("SupplyEntryId")
                        .IsUnique();

                    b.ToTable("FinancialSettlements");
                });

            modelBuilder.Entity("Fruittrack.Models.SupplyEntry", b =>
                {
                    b.Property<int>("SupplyEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplyEntryId"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FactoryDiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FactoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("FactoryPricePerTon")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FactoryWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FarmDiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FarmId")
                        .HasColumnType("int");

                    b.Property<decimal>("FarmPricePerTon")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FarmWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FreightCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransferFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TruckId")
                        .HasColumnType("int");

                    b.HasKey("SupplyEntryId");

                    b.HasIndex("FactoryId");

                    b.HasIndex("FarmId");

                    b.HasIndex("TruckId");

                    b.ToTable("SupplyEntries");
                });

            modelBuilder.Entity("Fruittrack.Models.Truck", b =>
                {
                    b.Property<int>("TruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TruckId"));

                    b.Property<string>("TruckNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TruckId");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("Fruittrack.Models.FinancialSettlement", b =>
                {
                    b.HasOne("Fruittrack.Models.SupplyEntry", "SupplyEntry")
                        .WithOne("FinancialSettlement")
                        .HasForeignKey("Fruittrack.Models.FinancialSettlement", "SupplyEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplyEntry");
                });

            modelBuilder.Entity("Fruittrack.Models.SupplyEntry", b =>
                {
                    b.HasOne("Fruittrack.Models.Factory", "Factory")
                        .WithMany("SupplyEntries")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fruittrack.Models.Farm", "Farm")
                        .WithMany("SupplyEntries")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fruittrack.Models.Truck", "Truck")
                        .WithMany("SupplyEntries")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");

                    b.Navigation("Farm");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("Fruittrack.Models.Factory", b =>
                {
                    b.Navigation("SupplyEntries");
                });

            modelBuilder.Entity("Fruittrack.Models.Farm", b =>
                {
                    b.Navigation("SupplyEntries");
                });

            modelBuilder.Entity("Fruittrack.Models.SupplyEntry", b =>
                {
                    b.Navigation("FinancialSettlement")
                        .IsRequired();
                });

            modelBuilder.Entity("Fruittrack.Models.Truck", b =>
                {
                    b.Navigation("SupplyEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
